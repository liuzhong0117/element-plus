@use 'sass:map';

@use 'mixins/mixins' as *;
@use 'common/var' as *;

$checked-icon: "data:image/svg+xml;utf8,%3Csvg class='icon' width='14' height='14' viewBox='0 0 14 14' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='currentColor' stroke-width='1.16667' stroke-linecap='round' stroke-linejoin='round' d='M11.6667 3.5L5.25004 9.91667L2.33337 7'%3E%3C/path%3E%3C/svg%3E";
@mixin checked-icon {
  content: '';
  position: absolute;
  top: 50%;
  right: 20px;
  border-top: none;
  border-right: none;
  background-repeat: no-repeat;
  background-position: center;
  background-color: map.get($select-option, 'selected-text-color');
  mask: url('#{$checked-icon}') no-repeat;
  mask-size: 100% 100%;
  -webkit-mask: url('#{$checked-icon}') no-repeat;
  -webkit-mask-size: 100% 100%;
  transform: translateY(-50%);
  width: 12px;
  height: 12px;
}

@include b(select-dropdown) {
  @include e(item) {
    font-size: map.get($select, 'font-size');
    // 16 as the padding of option item, 12 as the size of âœ“ icon size
    padding: 5px #{16 + 12}px 5px 16px;
    position: relative;
    color: map.get($select-option, 'text-color');
    line-height: 22px;
    box-sizing: border-box;
    cursor: pointer;

    @include when(hovering) {
      background-color: map.get($select-option, 'hover-background');
    }

    @include when(selected) {
      color: map.get($select-option, 'selected-text-color');
    }

    @include when(disabled) {
      color: map.get($select-option, 'disabled-color');
      cursor: not-allowed;
      background-color: unset;
    }
  }

  @include when(multiple) {
    .#{$namespace}-select-dropdown__item.is-selected {
      &::after {
        @include checked-icon;
      }
    }

    .#{$namespace}-select-dropdown__item.is-disabled {
      &::after {
        background-color: map.get($select-option, 'disabled-color');
      }
    }
  }
}
